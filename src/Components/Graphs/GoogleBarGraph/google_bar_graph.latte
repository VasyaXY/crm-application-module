{if !$loaded}
    <div class="well-lg well" style="height:300px;">
        <img src="/layouts/admin/dist/images/module/spinner.svg" alt="Loading..." class="spinner">
    </div>
{elseif empty($graphDataJs)}
    <div class="well-lg well">
        No data available for the selected period.
    </div>
{else}
    <div id="graph_{$graphId}" class="contains-chart graph line-graph" data-gchart="drawChart{$graphId|noescape}" style="height:{$height}px;"></div>

    <script type="text/javascript">

    function drawChart{$graphId|noescape}() {
        var data = google.visualization.arrayToDataTable
        ([
            [
                {if $isFirstColumnString}
                {"label": 'Serie', "type": "string"},
                {else}
                {"label": 'Day', "type": "date"},
                {/if}
                {foreach $series as $label => $_}
                {"label": {$label}, "type": "number"}{sep},{/sep}
                {/foreach}
            ],
            {$graphDataJs|noescape}
        ]);

        var chart = new google.visualization.ColumnChart(document.getElementById('graph_' + {$graphId}));

        var columns = [];
        var series = {};
        for (var i = 0; i < data.getNumberOfColumns(); i++) {
            columns.push(i);
            if (i > 0) {
                series[i - 1] = {};
            }
        }

        var oneDay = (1000 * 60 * 60 * 24);
        var dateRange = data.getColumnRange(0);

        var minDateRange = new Date;
        var maxDateRange = new Date;
        if (dateRange.min !== null) {
            minDateRange = new Date(dateRange.min);
        }
        if (dateRange.max !== null) {
            maxDateRange = new Date(dateRange.max);
        }

        var options = {
            chartArea: { width: '90%', height: '70%'},
            fontSize: ['11'],
            lineWidth: 3,
            series: series,
            hAxis: {
                viewWindow: {
                    min: new Date(minDateRange.getTime() - oneDay),
                    max: new Date(maxDateRange.getTime() + oneDay)
                }
            },
            legend: { position:'top', maxLines: 2}{if $stacked},
            isStacked: true
            {/if}
        };

        google.visualization.events.addListener(chart, 'select', function () {
            var sel = chart.getSelection();
            // if selection length is 0, we deselected an element
            if (sel.length > 0) {
                // if row is undefined, we clicked on the legend
                if (sel[0].row === null) {
                    var col = sel[0].column;
                    if (columns[col] == col) {
                        // hide the data series
                        columns[col] = {
                            label: data.getColumnLabel(col),
                            type: data.getColumnType(col),
                            calc: function () {
                                return null;
                            }
                        };

                        // grey out the legend entry
                        series[col - 1].color = '#CCCCCC';
                    }
                    else {
                        // show the data series
                        columns[col] = col;
                        series[col - 1].color = null;
                    }
                    var view = new google.visualization.DataView(data);
                    view.setColumns(columns);
                    chart.draw(view, options);
                }
            }
        });

        chart.draw(data, options);
    }

    {if !empty($series)}
        {if (!$redraw || google.visualization != undefined) }
            google.charts.load('current', { packages: ['corechart'] });
            google.charts.setOnLoadCallback(drawChart{$graphId|noescape});
        {else}
            drawChart{$graphId|noescape}();
        {/if}
    {/if}

    </script>
{/if}